{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","containers/App.js","actions.js","reducers.js","serviceWorkerRegistration.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","cardComponent","robots","map","user","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3ab7a859.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img  alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n  const cardComponent = robots.map(user => {\n    return (\n      <Card key={user.email} id={user.id} name={user.name} email={user.email} />\n    )\n  }) \n\n  return (\n    <div>\n      {cardComponent}\n  </div>\n  )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input \n      aria-label=\"Search Robots\"\n      className=\"pa3 ba b--green bg-lightest-blue\" \n      type='search' \n      placeholder='search robots...' \n      onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '3px solid black', height: '500px'}}>\n      {props.children}\n\n    </div>\n  )\n}\n\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return { \n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots()\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends JM GH PWA</h1>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  }\n}\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {searchField: action.payload});\n    default: \n      return state\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload, isPending: false})\n    default:\n      return state;\n}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport { searchRobots,requestRobots } from './reducers';\nimport 'tachyons';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\ndocument.getElementById('root')\n);\n\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}